package com.planprostructure.planpro.helper;

import com.planprostructure.planpro.domain.security.SecurityUser;
import com.planprostructure.planpro.domain.users.UserRepository;
import com.planprostructure.planpro.domain.users.Users;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
public class AuthHelper {

    private final UserRepository userRepository; // Essential for fetching user details

    public static Authentication getAuth(){
        return SecurityContextHolder.getContext().getAuthentication();
    }

    public static String getToken() {
        Authentication auth = getAuth();
        if (auth == null || !(auth.getPrincipal() instanceof Jwt)) {
            throw new IllegalStateException("JWT token not found in security context or principal is not a Jwt.");
        }
        Jwt jwt = (Jwt) auth.getPrincipal();
        return jwt.getTokenValue();
    }

    public static Jwt getJwt(){
        Authentication auth = getAuth();
        if (auth != null && auth.getPrincipal() instanceof Jwt) {
            return (Jwt) auth.getPrincipal();
        }
        return null;
    }

    public SecurityUser getSecurityUser(){ // Non-static because it uses injected userRepository
        Authentication authentication = getAuth();

        if (authentication == null) {
            return null; // No authentication context
        }

        Object principal = authentication.getPrincipal();

        if (principal instanceof SecurityUser) {
            // If the principal is already a SecurityUser (e.g., from a custom authentication provider), return it directly.
            return (SecurityUser) principal;
        } else if (principal instanceof Jwt) {
            Jwt jwt = (Jwt) principal;
            // IMPORTANT: Use the "userId" claim, as generated by your JwtUtil.java
            String userIdClaim = jwt.getClaimAsString("userId"); // This was the critical fix to match JwtUtil

            if (userIdClaim == null) {
                // If the user ID claim is not found, it's an issue with the JWT configuration or token.
                throw new UsernameNotFoundException("JWT does not contain the 'userId' claim. Check JwtUtil configuration.");
            }

            try {
                Long userId = Long.parseLong(userIdClaim);
                Users user = userRepository.findById(userId)
                        .orElseThrow(() -> new UsernameNotFoundException("User not found in database for ID from JWT: " + userId));
                // Assuming SecurityUser constructor is now just 'new SecurityUser(user)'
                return new SecurityUser(user);
            } catch (NumberFormatException e) {
                throw new UsernameNotFoundException("Invalid user ID format in JWT claim '" + userIdClaim + "'. Expected a number.", e);
            }
        } else if (principal instanceof String && "anonymousUser".equals(principal)) {
            // Handle anonymous users if they are part of your security setup
            return null;
        }

        // If the principal is neither SecurityUser nor Jwt, nor "anonymousUser", we can't determine the user.
        // This might indicate a misconfiguration or unexpected principal type.
        // Log this for debugging if necessary.
        System.err.println("Unexpected principal type in SecurityContextHolder: " + principal.getClass().getName() + ". Principal: " + principal.toString());
        return null;
    }

    public Users getUser() { // Non-static
        SecurityUser securityUser = getSecurityUser(); // Call the non-static helper method
        if (securityUser == null) {
            throw new UsernameNotFoundException("No authenticated user found or unable to load user from JWT. Check JWT claims and user existence in DB.");
        }
        return securityUser.users();
    }

    public Long getCurrentUserId() { // Non-static
        Users user = getUser();
        Long userId = user.getId();
        if (userId == null) {
            throw new UsernameNotFoundException("User ID is null for the authenticated user (after loading from DB).");
        }
        return userId;
    }

    public String getUsername() { // Non-static as it leverages getSecurityUser() potentially
        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        if (principal instanceof org.springframework.security.core.userdetails.UserDetails) {
            return ((org.springframework.security.core.userdetails.UserDetails) principal).getUsername();
        } else if (principal instanceof Jwt) {
            Jwt jwt = (Jwt) principal;
            // Use the "username" claim which is generated by JwtUtil, fall back to subject
            return jwt.getClaimAsString("username") != null ? jwt.getClaimAsString("username") : jwt.getSubject();
        }

        // Fallback for other principal types (e.g., anonymousUser, or unhandled types)
        return principal != null ? principal.toString() : "anonymous";
    }
}