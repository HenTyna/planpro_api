server:
  port: ${PORT:8080}

spring:
  datasource:
    # Railway PostgreSQL with SSL (uses DATABASE_URL if present; otherwise falls back to individual vars)
    url: ${DATABASE_URL:jdbc:postgresql://${PROD_DB_HOST:localhost}:${PROD_DB_PORT:5432}/${PROD_DB_NAME:postgres}?sslmode=require&sslfactory=org.postgresql.ssl.NonValidatingFactory&tcpKeepAlive=true&socketTimeout=30&connectTimeout=30}
    username: ${PROD_DB_USERNAME:postgres}
    password: ${PROD_DB_PASSWORD:}
    driver-class-name: org.postgresql.Driver
    hikari:
      # Very conservative pool for Railway's memory constraints
      maximum-pool-size: 2
      minimum-idle: 0
      connection-timeout: 20000
      idle-timeout: 300000        # 5m
      max-lifetime: 600000        # 10m (reduced from 15m)
      keepalive-time: 60000       # 1m (reduced from 2m)
      leak-detection-threshold: 30000
      # Prefer driver's isValid(); remove next line if driver supports it well
      connection-test-query: SELECT 1
      validation-timeout: 3000
      register-mbeans: false

  main:
    allow-bean-definition-overriding: true
    lazy-initialization: true      # trims startup memory

  sql:
    init:
      mode: always

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          lob:
            non_contextual_creation: true
          batch_size: 5  # Reduced from 10
          batch_versioned_data: true
        connection:
          provider_disables_autocommit: true
        order_inserts: true
        order_updates: true
        batch_fetch_style: DYNAMIC
        # Reduce second-level cache usage
        cache:
          use_second_level_cache: false
          use_query_cache: false
      javax:
        persistence:
          schema-generation:
            database:
              action: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect

# Health endpoints for Docker HEALTHCHECK (keep if you use /actuator/health)
management:
  server:
    port: ${PORT:8080}
  endpoints:
    web:
      exposure:
        include: health,info
      base-path: /actuator
  endpoint:
    health:
      probes:
        enabled: true
      # Add database health check
      group:
        db:
          include: db
          show-details: when-authorized

# JSONB
json:
  mapping:
    pretty-print: false

# Password Encryption
password:
  encryption:
    key: ${PASSWORD_ENCRYPTION_KEY:mytestkeyasdddds}

# JWT
jwt:
  issuer: planpro-app
  secret: ${JWT_SECRET:mySecretKey}
  expiration-ms: 86400000 # 24 hours

# RSA keys - Commented out for Railway deployment since certs don't exist
# rsa:
#   public-key: classpath:certs/public-key.pem
#   private-key: classpath:certs/private-key.pem

# Logging (quieter + simple pattern)
logging:
  level:
    root: warn
    org.hibernate: warn
    org.springframework: warn
    com.planprostructure: info
    com.zaxxer.hikari: warn
    org.springframework.jdbc: warn
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# File storage (matches Dockerfile path)
file:
  server-path: /tmp/upload-files/
  client-path: /api/v1/image
  temp-path: ${file.server-path}/temp_qr
  base-url: ${RAILWAY_STATIC_URL:https://planpro-api-production.up.railway.app}${file.client-path}
  base-image-url: ${RAILWAY_STATIC_URL:https://planpro-api-production.up.railway.app}

# Telegram (quote token; keep secret in env)
telegram-setting:
  enable: ${TELEGRAM_BOT_ENABLE:false}
  base-url: https://api.telegram.org
  username: ${TELEGRAM_BOT_USERNAME:planproapp_bot}
  access-token: "${TELEGRAM_BOT_TOKEN:your-token-here}"
  bot-url: https://t.me/${TELEGRAM_BOT_USERNAME:planproapp_bot}
  share-url: https://t.me/${TELEGRAM_BOT_USERNAME:planproapp_bot}

# Swagger / OpenAPI
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    url: /v3/api-docs
    disable-swagger-default-url: true
    operations-sorter: method
    tags-sorter: alpha
    display-request-duration: true
    filter: true
    try-it-out-enabled: false
    doc-expansion: none
    default-models-expand-depth: 1
  api-docs:
    path: /v3/api-docs
    enabled: true
  show-actuator: false
  cache:
    disabled: true
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
